name: Build and Publish C# Executable (No SonarQube) # 明确表示不包含 SonarQube

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to build from'
        required: true
        default: 'master'
      build_configuration:
        description: 'Build configuration (e.g., Debug, Release)'
        required: true
        default: 'Release'
      target_runtime:
        description: 'Target runtime identifier (e.g., win-x64)'
        required: true
        default: 'win-x64'
        type: choice
        options:
          - win-x64

jobs:
  build-publish: # 简化 job 名称
    name: Build and publish C# app
    runs-on: windows-latest # 保持在 Windows 环境，因为是 .NET Framework

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch }}

      # --- SonarQube 相关步骤已完全移除或注释掉 ---
      # - name: Cache SonarQube packages
      #   uses: actions/cache@v4
      #   with:
      #     path: ~\AppData\Local\SonarScanner\cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar
      # - name: Cache SonarQube scanner
      #   id: cache-sonar-scanner
      #   uses: actions/cache@v4
      #   with:
      #     path: .\.sonar\scanner
      #     key: ${{ runner.os }}-sonar-scanner
      #     restore-keys: ${{ runner.os }}-sonar-scanner
      # - name: Install SonarQube scanner
      #   if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      #   shell: powershell
      #   run: |
      #     New-Item -Path .\.sonar\scanner -ItemType Directory -Force | Out-Null
      #     dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner --verbosity normal
      #     if ($LASTEXITCODE -ne 0) {
      #         throw "Failed to install/update dotnet-sonarscanner. Exit code: $LASTEXITCODE"
      #     }
      #     Write-Host "dotnet-sonarscanner installed successfully."
      #     Write-Host "Contents of .sonar/scanner:"
      #     Get-ChildItem .\.sonar\scanner\
      # ---------------------------------------------------

      # ---------------------------------------------------
      # 核心构建步骤
      - name: Restore NuGet packages
        shell: powershell # 使用 PowerShell，因为它默认是 windows-latest 的 shell
        run: |
          Write-Host "Running dotnet restore for AssemblyTool.sln..."
          dotnet restore AssemblyTool.sln --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet restore failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet restore completed successfully."

      - name: Build Project
        shell: powershell
        run: |
          Write-Host "Building AssemblyTool.sln with configuration ${{ github.event.inputs.build_configuration }}..."
          dotnet build AssemblyTool.sln `
            --configuration ${{ github.event.inputs.build_configuration }} `
            --no-restore `
            --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet build failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet build completed successfully."
      # ---------------------------------------------------

      # --- SonarQube End Analysis 步骤也已移除 ---
      # - name: SonarQube End Analysis
      #   shell: powershell
      #   run: |
      #     Write-Host "Ending SonarQube analysis (dotnet-sonarscanner end)..."
      #     .\.sonar\scanner\dotnet-sonarscanner end `
      #       /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      #     if ($LASTEXITCODE -ne 0) {
      #         throw "dotnet-sonarscanner end failed. Exit code: $LASTEXITCODE"
      #     }
      #     Write-Host "dotnet-sonarscanner end completed successfully."
      # ---------------------------------------------------

      # ---------------------------------------------------
      # 发布可运行的二进制文件
      - name: Publish C# application for Windows x64
        shell: powershell
        run: |
          Write-Host "Publishing AssemblyTool/AssemblyTool.csproj for Windows x64..."
          # !!! 再次确认 'AssemblyTool/AssemblyTool.csproj' 是正确的路径
          dotnet publish AssemblyTool/AssemblyTool.csproj `
            --configuration ${{ github.event.inputs.build_configuration }} `
            --output publish/${{ github.event.inputs.target_runtime }} `
            --runtime ${{ github.event.inputs.target_runtime }} `
            --self-contained true `
            /p:PublishSingleFile=true `
            /p:TrimUnusedAssemblies=true `
            --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet publish failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet publish completed successfully."

      # ---------------------------------------------------
      # 上传编译好的二进制文件作为 Artifact
      - name: Upload ${{ github.event.inputs.target_runtime }} Executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.target_runtime }}-executable
          path: publish/${{ github.event.inputs.target_runtime }}
