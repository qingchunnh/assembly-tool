# ... (保持 runs-on: windows-latest) ...

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.target_branch }}

      # 暂时注释掉所有 SonarQube 缓存和安装步骤
      # - name: Cache SonarQube packages ...
      # - name: Cache SonarQube scanner ...
      # - name: Install SonarQube scanner ...

      # ---------------------------------------------------
      # 核心编译步骤 (没有 SonarQube)
      - name: Restore NuGet packages
        shell: powershell # 或者 cmd
        run: |
          Write-Host "Running dotnet restore for AssemblyTool.sln..."
          dotnet restore AssemblyTool.sln --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet restore failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet restore completed successfully."

      - name: Build Project
        shell: powershell # 或者 cmd
        run: |
          Write-Host "Building AssemblyTool.sln with configuration ${{ github.event.inputs.build_configuration }}..."
          dotnet build AssemblyTool.sln `
            --configuration ${{ github.event.inputs.build_configuration }} `
            --no-restore `
            --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet build failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet build completed successfully."
      # ---------------------------------------------------

      # ---------------------------------------------------
      # 发布可运行的二进制文件 (保持 PowerShell 语法)
      - name: Publish C# application for Windows x64
        shell: powershell # 或者 cmd
        run: |
          Write-Host "Publishing AssemblyTool/AssemblyTool.csproj for Windows x64..."
          dotnet publish AssemblyTool/AssemblyTool.csproj `
            --configuration ${{ github.event.inputs.build_configuration }} `
            --output publish/${{ github.event.inputs.target_runtime }} `
            --runtime ${{ github.event.inputs.target_runtime }} `
            --self-contained true `
            /p:PublishSingleFile=true `
            /p:TrimUnusedAssemblies=true `
            --verbosity normal
          if ($LASTEXITCODE -ne 0) {
              throw "dotnet publish failed. Exit code: $LASTEXITCODE"
          }
          Write-Host "dotnet publish completed successfully."

      # 上传编译好的二进制文件作为 Artifact
      - name: Upload ${{ github.event.inputs.target_runtime }} Executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.target_runtime }}-executable
          path: publish/${{ github.event.inputs.target_runtime }}
