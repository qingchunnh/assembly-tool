# 工作流名称
name: .NET Build and Publish

# 触发工作流的事件
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-publish:
    # 指定作业运行的虚拟机环境
    runs-on: windows-latest

    steps:
    # 第一步：检出（下载）你的仓库代码到虚拟机
    - name: Checkout repository
      uses: actions/checkout@v4

    # 第二步：安装和设置 .NET SDK 环境
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x # 确保版本覆盖你项目中所有需要的 .NET 版本

    # 第三步：还原 NuGet 包依赖
    # 针对整个解决方案进行还原，确保所有项目依赖都下载
    - name: Restore dependencies
      run: dotnet restore AssemblyTool.sln

    # 第四步：构建整个解决方案
    # 使用 dotnet build 来编译所有项目，但不发布。
    # 这会处理好所有项目间的依赖关系，包括 de4dot 等 .NET Framework 项目。
    # 我们在这里就禁用可空引用警告，让日志更清晰。
    - name: Build solution
      run: dotnet build AssemblyTool.sln --configuration Release --no-restore /p:Nullable=disable

    # 第五步：发布主应用程序
    # 仅发布你的主项目（假设是 AssemblyTool）。
    # publish 命令会自动查找并包含所有依赖项（包括 AssemblyLib, DumpLib, 甚至 de4dot 的输出）到发布目录。
    # --no-build 因为上一步已经构建过了，可以节省时间。
    - name: Publish main project
      run: >
        dotnet publish AssemblyTool/AssemblyTool.csproj 
        --configuration Release 
        --no-build 
        --output ./publish

    # 第六步：上传发布产物
    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      with:
        # 上传的产物包名称
        name: published-application
        # 要上传的文件路径
        path: ./publish
        # 产物保留天数
        retention-days: 7
