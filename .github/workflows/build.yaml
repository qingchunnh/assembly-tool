# .github/workflows/build.yml

name: Build and Publish Executable

on:
  # 当有代码推送到 master 分支时触发
  push:
    branches: [ master ]
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  
jobs:
  build-and-publish:
    # 根据手动触发时选择的平台动态命名 Job
    name: Build for ${{ github.event.inputs.target_runtime || 'win-x64' }}
    # 运行环境。注意：若要构建 linux 或 osx 版本，需要更改为对应的运行器
    # 例如：ubuntu-latest for linux-x64, macos-latest for osx-x64
    runs-on: windows-latest

    env:
      # 定义环境变量，让后续步骤更简洁
      # !! 请根据你的项目结构修改下面的文件名和路径 !!
      SOLUTION_FILE: 'AssemblyTool.sln'
      PROJECT_FILE: 'AssemblyTool/AssemblyTool.csproj'

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 安装 .NET 9 SDK
      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      # 3. 恢复 NuGet 包依赖
      - name: Restore NuGet packages
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      # 4. 发布应用程序
      # 'dotnet publish' 是一个组合命令，它会先编译再发布，非常高效。
      - name: Publish application
        run: >
          dotnet publish ${{ env.PROJECT_FILE }}
          --configuration ${{ github.event.inputs.build_configuration || 'Release' }}
          --runtime ${{ github.event.inputs.target_runtime || 'win-x64' }}
          --output ./Build/${{ github.event.inputs.target_runtime || 'win-x64' }}
          --no-restore
          -p:PublishSingleFile=true
          -p:PublishTrimmed=true
          --self-contained true

      # 5. 上传构建产物
      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ github.event.inputs.target_runtime || 'win-x64' }}
          path: ./Build/${{ github.event.inputs.target_runtime || 'win-x64' }}/
